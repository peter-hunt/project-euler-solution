"""
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have
over five hundred divisors?
"""

from math import floor, sqrt


count = 500


def initial_solve(count):
    def count_factor(num):
        if sqrt(num) % 1 == 0:
            count = 3

            for i in range(2, floor(sqrt(num) - 1)):
                if num % i == 0:
                    count += 2
        else:
            count = 2

            for i in range(2, floor(sqrt(num))):
                if num % i == 0:
                    count += 2

        return count

    count = 0
    index = 1
    num = 1

    while count <= 500:
        index += 1
        num = index * (index + 1) // 2
        count = count_factor(num)

    return num


def improved_solve(count):
    pass


# 76576500
print(initial_solve(count))
# print(improved_solve(count))
